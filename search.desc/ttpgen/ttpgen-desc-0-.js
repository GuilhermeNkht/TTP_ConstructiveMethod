searchState.loadedDescShard("ttpgen", 0, "Command-line interface for TTP Solution Generator.\nReturns the argument unchanged.\nPath to the XML instance file\nCalls <code>U::from(self)</code>.\nEnable or disable logging\nDirectory to save generated permutations\nDirectory to save generated solutions\nNumber of random permutations to generate\nDisable saving to disk\nRandom seed for reproducibility\nRepresents capacity constraints for the tournament.\nRepresents the travel distance between two teams.\nAll raw data parsed from a TTP XML instance.\nRepresents separation constraints for the tournament.\nRepresents a time slot or round in the tournament.\nRepresents a team in the tournament.\nInterval parameter\nMaximum allowed occurrences.\nMaximum allowed distance between occurrences.\nMinimum required occurrences.\nMinimum required distance between occurrences.\nMode type 1 (‘A’, ‘H’).\nMode type 2 (string).\nPenalty value for violation.\nPenalty value for violation.\nTeam group affected by the constraint.\nFirst affected team group.\nSecond affected team group.\nType of constraint (description).\nType of constraint (description).\nCapacity constraints for the tournament.\nDistance value between two teams.\nPair travel distances between teams.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique team ID.\nSlot ID.\nName of the instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeague or division ID.\nName of the team.\nName or label of the slot.\nCreates a new Distance with default values (0).\nCreates a new Team with default values.\nCreates a new Slot with default values.\nCreates a new CapacityConstraints instance with default …\nCreates a new SeparationConstraints instance with default …\nSeparation constraints for the tournament.\nList of time slots or rounds.\nFirst team ID.\nSecond team ID.\nTeam group or category.\nList of teams participating in the tournament.\nInitializes the logger to write messages to console and …\nRepresents a single match/game between two teams.\nRepresents a set of generated team permutations along with …\nA simple wrapper around <code>ProgressBar</code> for logging progress.\nRepresents a solution for the scheduling problem.\nChecks all constraints for a solution, including capacity, …\nCalculates the total traveling distance for all teams in a …\nEvaluates a given solution by calculating the total …\nFinishes the progress bar, marking it as complete.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates all possible solutions for a given team …\nCalculates the total traveling distances for a list of …\nGenerates a schedule using Florian’s method construction.\nGenerates a set of unique random permutations of the team …\nGenerates a complete solution for a given team permutation …\nGenerates a traveling distance matrix based on the …\nChecks if a list of <code>Solution</code> objects contains duplicates.\nIncrements the progress bar by one step.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads all solution files from a directory and returns them …\nLogs a solution’s schedule and its evaluation metrics.\nCreates a new <code>ProgressBarLog</code> with the given total count.\nCreates a new, empty <code>Solution</code> instance initialized with …\nSaves any serializable data to a json file.\nSets a custom message to display alongside the progress …\nConverts a <code>Solution</code> matrix into a formatted string …\nReturns the argument unchanged.\nComputes and logs statistical summaries of a vector of …\nCalls <code>U::from(self)</code>.\nComputes the arithmetic mean (average) of a vector of …\nComputes the median value of a vector of integers.\nReturns the minimum and maximum values in a vector of …\nPlots a histogram of the given distances and saves it as …\nComputes the first, second (median), and third quartiles …\nComputes the standard deviation of a vector of integer …\nComputes the variance of a vector of integer values.\nStructure responsible for managing XML file reading and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a <code>&lt;CapacityConstraints&gt;</code> XML node and converts it …\nParses a <code>&lt;Distance&gt;</code> XML node and converts it into a …\nParses a <code>&lt;SeparationConstraint&gt;</code> XML node and converts it …\nParses a <code>&lt;Slot&gt;</code> XML node and converts it into a <code>Slot</code> …\nParses a <code>&lt;Team&gt;</code> XML node and converts it into a <code>Team</code> …\nReads an XML file and parses into a <code>Rawdata</code> struct.")